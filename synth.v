/* Generated by Yosys 0.8 (git sha1 5706e90) */

(* top =  1  *)
(* src = "synth_rtl.v:1" *)
module synth_rtl(clk, reset_L, selector, data_in0, data_in1, data_out_c);
  (* src = "synth_rtl.v:13" *)
  wire [1:0] _0_;
  (* src = "synth_rtl.v:2" *)
  input clk;
  (* src = "synth_rtl.v:5" *)
  input [1:0] data_in0;
  (* src = "synth_rtl.v:6" *)
  input [1:0] data_in1;
  (* src = "synth_rtl.v:7" *)
  output [1:0] data_out_c;
  reg [1:0] data_out_c;
  (* src = "synth_rtl.v:3" *)
  input reset_L;
  (* src = "synth_rtl.v:4" *)
  input selector;
  (* src = "synth_rtl.v:8" *)
  wire [1:0] x;
  assign _0_[0] = reset_L ? (* src = "synth_rtl.v:15" *) x[0] : 1'h0;
  assign _0_[1] = reset_L ? (* src = "synth_rtl.v:15" *) x[1] : 1'h0;
  assign x[0] = selector ? (* src = "synth_rtl.v:10" *) data_in1[0] : data_in0[0];
  assign x[1] = selector ? (* src = "synth_rtl.v:10" *) data_in1[1] : data_in0[1];
  (* src = "synth_rtl.v:13" *)
  always @(posedge clk)
      data_out_c[0] <= _0_[0];
  (* src = "synth_rtl.v:13" *)
  always @(posedge clk)
      data_out_c[1] <= _0_[1];
endmodule
